import streamlit as st
import json

st.title("üß™ Gerador de Prompt para Quest√µes de Qu√≠mica")

# Upload do arquivo JSON
uploaded_file = st.file_uploader("üìÇ Fa√ßa o upload de um arquivo JSON contendo os conceitos de qu√≠mica", type=["json"])

# Carregar o JSON corretamente
if uploaded_file is not None:
    try:
        conceitos_quimica = json.load(uploaded_file)
    except json.JSONDecodeError:
        st.error("‚ùå Erro ao carregar o JSON. Certifique-se de que o arquivo est√° formatado corretamente.")
        conceitos_quimica = []
else:
    conceitos_quimica = []
    st.warning("‚ö†Ô∏è Aguarde o upload de um arquivo JSON para continuar.")

# Inicializar session_state corretamente como um dicion√°rio
if "conceitos_selecionados" not in st.session_state:
    st.session_state.conceitos_selecionados = {}

# T√≠tulo do Question√°rio
titulo_questionario = st.text_input("üìú Digite o t√≠tulo do question√°rio:")

# Escolha do n√∫mero de quest√µes
total_questoes = st.slider("üî¢ N√∫mero de quest√µes:", min_value=1, max_value=20, value=5)

# Escolha do n√∫mero de conceitos por quest√£o
num_conceitos = st.slider("üìö N√∫mero de conceitos por quest√£o:", min_value=1, max_value=3, value=2)

# Escolha do n√∫mero m√°ximo de quest√µes por conte√∫do
max_questoes_por_conteudo = st.slider("üìä N√∫mero m√°ximo de quest√µes por conte√∫do:", min_value=1, max_value=10, value=4)

st.write("### üèóÔ∏è Escolha os conte√∫dos e conceitos desejados")

# Criar expanders para os conte√∫dos carregados do JSON
if isinstance(conceitos_quimica, list):
    for idx_conteudo, conteudo_data in enumerate(conceitos_quimica):
        conteudo = conteudo_data["content"]
        topicos = conteudo_data["topics"]

        with st.expander(f"üìÇ {conteudo}"):
            selecionar_conteudo = st.checkbox(f"‚úÖ {conteudo}", key=f"conteudo_{idx_conteudo}", value=False)
            if selecionar_conteudo:
                if conteudo not in st.session_state.conceitos_selecionados:
                    st.session_state.conceitos_selecionados[conteudo] = {}

                for topico_data in topicos:
                    topico = topico_data["topic"]
                    subtitulos = topico_data["subtopics"]
                    st.session_state.conceitos_selecionados[conteudo][topico] = subtitulos

            for idx_topico, topico_data in enumerate(topicos):
                topico = topico_data["topic"]
                subtitulos = topico_data["subtopics"]

                selecionar_topico = st.checkbox(f"üìñ {topico}", key=f"topico_{idx_conteudo}_{idx_topico}", value=False)
                if selecionar_topico:
                    if conteudo not in st.session_state.conceitos_selecionados:
                        st.session_state.conceitos_selecionados[conteudo] = {}
                    st.session_state.conceitos_selecionados[conteudo][topico] = subtitulos

                for idx_subtopico, subtopico in enumerate(subtitulos):
                    selecionar_subtopico = st.checkbox(
                        f"üî¨ {subtopico}",
                        key=f"subtopico_{idx_conteudo}_{idx_topico}_{idx_subtopico}",
                        value=False
                    )
                    if selecionar_subtopico:
                        if conteudo not in st.session_state.conceitos_selecionados:
                            st.session_state.conceitos_selecionados[conteudo] = {}
                        if topico not in st.session_state.conceitos_selecionados[conteudo]:
                            st.session_state.conceitos_selecionados[conteudo][topico] = []
                        if subtopico not in st.session_state.conceitos_selecionados[conteudo][topico]:
                            st.session_state.conceitos_selecionados[conteudo][topico].append(subtopico)
else:
    st.error("‚ö†Ô∏è Estrutura do JSON inv√°lida. Certifique-se de que ele segue o formato correto.")

# Exibir conceitos selecionados com hierarquia mantida
st.write("### üìå Conceitos Selecionados:")
if st.session_state.conceitos_selecionados:
    for conteudo, topicos in st.session_state.conceitos_selecionados.items():
        st.write(f"üìÇ **{conteudo}**")
        for topico, subtitulos in topicos.items():
            st.write(f"   üìñ {topico}")
            for subtopico in subtitulos:
                st.write(f"      üî¨ {subtopico}")
else:
    st.write("‚ö†Ô∏è Nenhum conceito selecionado ainda.")

# Determinar como expressar o n√∫mero de conceitos no prompt
txt_num_conceitos = "um √∫nico conceito" if num_conceitos == 1 else f"entre 1 e {num_conceitos} conceitos simultaneamente"

# Criar Prompt
if st.button("üìù Gerar Prompt e Exibir Texto"):
    if not st.session_state.conceitos_selecionados:
        st.error("‚ö†Ô∏è Por favor, selecione pelo menos um conceito antes de gerar o prompt.")
    else:
        conceitos_agrupados = list(st.session_state.conceitos_selecionados)  # Usar todos os conceitos selecionados
        prompt_text = (
            f"Gere {total_questoes} quest√µes de m√∫ltipla escolha correlacionando os seguintes conceitos de qu√≠mica: "
            f"{', '.join([f'{c} - {t} - {s}' for c, t, s in conceitos_agrupados])}. "
            f"Cada quest√£o deve correlacionar {len(conceitos_agrupados)} conceitos distintos e ter quatro alternativas (A, B, C e D), "
            "com apenas uma alternativa correta. A complexidade das quest√µes deve ser apropriada para estudantes universit√°rios. "
            f"No m√°ximo {max_questoes_por_conteudo} quest√µes podem ser geradas para cada conte√∫do. "
            "As quest√µes devem ser variadas, cobrindo aspectos conceituais, te√≥ricos e aplica√ß√µes pr√°ticas dos conceitos selecionados. "
            "Certifique-se de que cada quest√£o tenha apenas uma resposta correta e que as alternativas erradas sejam plaus√≠veis. "
            "Use a formata√ß√£o adequada para qu√≠mica, incluindo subscrito para f√≥rmulas moleculares (exemplo: H‚ÇÇO) e sobrescrito para cargas i√¥nicas (exemplo: Ca¬≤‚Å∫). "
            "O JSON gerado deve conter a seguinte estrutura:\n\n"
            "[\n"
            "    {\n"
            "        \"question\": \"Qual √© a equa√ß√£o correta para a entalpia padr√£o de forma√ß√£o da √°gua l√≠quida?\",\n"
            "        \"options\": [\"A) H‚ÇÇ(g) + 1/2 O‚ÇÇ(g) ‚Üí H‚ÇÇO(l)\", \"B) H‚ÇÇO(g) ‚Üí H‚ÇÇ(g) + 1/2 O‚ÇÇ(g)\", \"C) 2H‚ÇÇ(g) + O‚ÇÇ(g) ‚Üí 2H‚ÇÇO(l)\", \"D) H‚ÇÇO(l) ‚Üí H‚ÇÇ(g) + 1/2 O‚ÇÇ(g)\"],\n"
            "        \"answer\": \"A) H‚ÇÇ(g) + 1/2 O‚ÇÇ(g) ‚Üí H‚ÇÇO(l)\",\n"
            "        \"tags\": {\"content\": \"Termoqu√≠mica\", \"topic\": \"Rea√ß√µes de Forma√ß√£o\", \"subtopic\": \"Energia\"}\n"
            "    }\n"
            "]"
            f"Hierarquia de conte√∫dos carregados:\n{json.dumps(conteudos_quimica, indent=4, ensure_ascii=False)}\n\n"
        )
        
        st.write("### ‚ú® Prompt Gerado:")
        st.text_area("Copie este prompt para rodar em uma LLM:", prompt_text, height=400)
        
        # Salvar prompt como JSON
        prompt_data = {
            "titulo": titulo_questionario,
            "numero_questoes": total_questoes,
            "conceitos_por_questao": num_conceitos,
            "max_questoes_por_conteudo": max_questoes_por_conteudo,
            "conceitos_selecionados": st.session_state.conceitos_selecionados,
            "prompt_text": prompt_text
        }

        st.download_button(
            label="‚¨áÔ∏è Baixar JSON do Prompt",
            data=json.dumps(prompt_data, indent=4, ensure_ascii=False),
            file_name="prompt_questoes.json",
            mime="application/json"
        )