import streamlit as st
import json
import os

st.title("üß™ Gerador de Prompt para Quest√µes de Qu√≠mica")

# Upload do arquivo JSON
uploaded_file = st.file_uploader("üìÇ Fa√ßa o upload de um arquivo JSON contendo os conceitos de qu√≠mica", type=["json"])

if uploaded_file is not None:
    conceitos_quimica = json.load(uploaded_file)
else:
    conceitos_quimica = {}
    st.warning("‚ö†Ô∏è Aguarde o upload de um arquivo JSON para continuar.")

# T√≠tulo do Question√°rio
titulo_questionario = st.text_input("üìú Digite o t√≠tulo do question√°rio:")

# Escolha do n√∫mero de quest√µes
total_questoes = st.slider("üî¢ N√∫mero de quest√µes:", min_value=1, max_value=20, value=5)

# Escolha do n√∫mero de conceitos por quest√£o
num_conceitos = st.slider("üìö N√∫mero de conceitos por quest√£o:", min_value=1, max_value=3, value=2)

# Escolha do n√∫mero m√°ximo de quest√µes por conte√∫do
max_questoes_por_conteudo = st.slider("üìä N√∫mero m√°ximo de quest√µes por conte√∫do:", min_value=1, max_value=10, value=4)

st.write("### üèóÔ∏è Escolha os conte√∫dos e conceitos desejados")

# Estado da sele√ß√£o armazenado na sess√£o do usu√°rio
if "conceitos_selecionados" not in st.session_state:
    st.session_state.conceitos_selecionados = set()

# Criar expanders apenas para os conte√∫dos carregados do JSON
for conteudo, topicos in conceitos_quimica.items():
    with st.expander(f"üìÇ {conteudo}"):
        selecionar_conteudo = st.checkbox(f"‚úÖ {conteudo}", key=f"{conteudo}_todos", value=False)
        if selecionar_conteudo:
            for topico, subtitulos in topicos.items():
                for subtopico in subtitulos:
                    st.session_state.conceitos_selecionados.add(f"{conteudo} - {topico} - {subtopico}")
        
        for topico, subtitulos in topicos.items():
            selecionar_topico = st.checkbox(f"üìñ {topico}", key=f"{conteudo}_{topico}_todos", value=False)
            if selecionar_topico:
                for subtopico in subtitulos:
                    st.session_state.conceitos_selecionados.add(f"{conteudo} - {topico} - {subtopico}")
            
            for subtopico in subtitulos:
                selecionar_subtopico = st.checkbox(f"üî¨ {subtopico}", key=f"{conteudo}_{topico}_{subtopico}", value=False)
                if selecionar_subtopico:
                    st.session_state.conceitos_selecionados.add(f"{conteudo} - {topico} - {subtopico}")

# Exibir conceitos selecionados
st.write("### üìå Conceitos Selecionados:")
if st.session_state.conceitos_selecionados:
    st.write("‚úîÔ∏è " + "\n‚úîÔ∏è ".join(st.session_state.conceitos_selecionados))
else:
    st.write("‚ö†Ô∏è Nenhum conceito selecionado ainda.")

# Determinar como expressar o n√∫mero de conceitos no prompt
txt_num_conceitos = "um √∫nico conceito" if num_conceitos == 1 else f"entre 1 e {num_conceitos} conceitos simultaneamente"

# Criar Prompt
if st.button("üìù Gerar Prompt e Exibir Texto"):
    if not st.session_state.conceitos_selecionados:
        st.error("‚ö†Ô∏è Por favor, selecione pelo menos um conceito antes de gerar o prompt.")
    else:
        prompt_text = (
            f"Gere {total_questoes} quest√µes de m√∫ltipla escolha baseadas nos seguintes conte√∫dos de qu√≠mica: "
            f"{', '.join(st.session_state.conceitos_selecionados)}. "
            f"Cada quest√£o deve abordar {txt_num_conceitos} e ter quatro alternativas (A, B, C e D), "
            "com apenas uma alternativa correta. A complexidade das quest√µes deve ser apropriada para estudantes universit√°rios. "
            f"No m√°ximo {max_questoes_por_conteudo} quest√µes podem ser geradas para cada conte√∫do. "
            "As quest√µes devem ser variadas, cobrindo aspectos conceituais, te√≥ricos e aplica√ß√µes pr√°ticas dos conceitos selecionados. "
            "Certifique-se de que cada quest√£o tenha apenas uma resposta correta e que as alternativas erradas sejam plaus√≠veis. "
            "Use a formata√ß√£o adequada para qu√≠mica, incluindo subscrito para f√≥rmulas moleculares (exemplo: H‚ÇÇO) e sobrescrito para cargas i√¥nicas (exemplo: Ca¬≤‚Å∫). "
            "O resultado deve ser salvo em um arquivo JSON contendo uma lista de quest√µes no seguinte formato:\n\n"
            "[\n"
            "    {\n"
            "        \"question\": \"Qual √© a equa√ß√£o correta para a entalpia padr√£o de forma√ß√£o da √°gua l√≠quida?\",\n"
            "        \"options\": [\"A) H‚ÇÇ(g) + 1/2 O‚ÇÇ(g) ‚Üí H‚ÇÇO(l)\", \"B) H‚ÇÇO(g) ‚Üí H‚ÇÇ(g) + 1/2 O‚ÇÇ(g)\", \"C) 2H‚ÇÇ(g) + O‚ÇÇ(g) ‚Üí 2H‚ÇÇO(l)\", \"D) H‚ÇÇO(l) ‚Üí H‚ÇÇ(g) + 1/2 O‚ÇÇ(g)\"],\n"
            "        \"answer\": \"A) H‚ÇÇ(g) + 1/2 O‚ÇÇ(g) ‚Üí H‚ÇÇO(l)\",\n"
            "        \"tags\": {\"conte√∫do\": \"Termoqu√≠mica\", \"t√≥pico\": \"Rea√ß√µes de Forma√ß√£o\", \"subt√≥pico\": \"Energia\"}\n"
            "    }\n"
            "]"
        )
        
        st.write("### ‚ú® Prompt Gerado:")
        st.text_area("Copie este prompt para rodar em uma LLM:", prompt_text, height=400)
        
        # Salvar prompt como JSON
        prompt_data = {
            "titulo": titulo_questionario,
            "numero_questoes": total_questoes,
            "conceitos_por_questao": num_conceitos,
            "max_questoes_por_conteudo": max_questoes_por_conteudo,
            "conceitos_selecionados": list(st.session_state.conceitos_selecionados),
            "prompt_text": prompt_text
        }
        
        prompt_file_path = "prompt_questoes.json"
        with open(prompt_file_path, "w", encoding="utf-8") as file:
            json.dump(prompt_data, file, ensure_ascii=False, indent=4)
        
        st.download_button(label="‚¨áÔ∏è Baixar JSON do Prompt", data=json.dumps(prompt_data, indent=4, ensure_ascii=False), file_name=prompt_file_path, mime="application/json")
